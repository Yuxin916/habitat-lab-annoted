#######################Env#############################################################################
BASE_TASK_CONFIG_PATH: "configs/tasks/objectnav_hm3d.yaml"
ENV_NAME: "ObjNavRLEnv"
NUM_ENVIRONMENTS: 4
SENSORS: ["DEPTH_SENSOR", "RGB_SENSOR"]

#######################Training#############################################################################
TRAINER_NAME: "ddppo"  # "ddppo" or "ppo"
# only define one of the following
TOTAL_NUM_STEPS: 7e6
#NUM_UPDATES: 270000

#######################Saving & Log#############################################################################
# tensorboard, video and checkpoint directories
TENSORBOARD_DIR: "tb_test"
VIDEO_DIR: "video_test"
CHECKPOINT_FOLDER: "data/ddppo_checkpoints_minival/"
LOG_INTERVAL: 10
LOG_FILE: "env_test_minival.log"
NUM_CHECKPOINTS: 100


#######################Eval#############################################################################
# Evaluate on all episodes
TEST_EPISODE_COUNT: -1
# which checkpoint to evaluate
EVAL_CKPT_PATH_DIR: "data/ddppo_checkpoints_minival/ckpt.26.pth"
# displaying videos on tensorboard and for saving videos on disk, respectively
VIDEO_OPTION: ["disk", "tensorboard"]

#######################OTHERS#############################################################################
# threshold of how many steps from the same scene can be taken consecutively. :py:`-1` for no limit
CMD_TRAILING_OPTS: ["TASK_CONFIG.ENVIRONMENT.ITERATOR_OPTIONS.MAX_SCENE_REPEAT_STEPS", "50000"]
SIMULATOR_GPU_ID: 0
TORCH_GPU_ID: 0
# Force PyTorch to be single threaded as
# this improves performance considerably
FORCE_TORCH_SINGLE_THREADED: True


EVAL:
  # can be different from training dataset split
  SPLIT: "minival"
  # whether use the same config as checkpoint
  USE_CKPT_CONFIG: True

RL:
  SUCCESS_REWARD: 2.5
  SLACK_REWARD: -1e-3

  POLICY:
    name: "PointNavResNetPolicy"

  PPO:
    # ppo params
    clip_param: 0.2
    ppo_epoch: 4
    num_mini_batch: 2
    value_loss_coef: 0.5
    entropy_coef: 0.01
    lr: 2.5e-4
    eps: 1e-5
    max_grad_norm: 0.2
    num_steps: 128
    hidden_size: 512
    use_gae: True
    gamma: 0.99
    tau: 0.95
    use_linear_clip_decay: False
    use_linear_lr_decay: False
    reward_window_size: 50
    use_normalized_advantage: False

  DDPPO:
    sync_frac: 0.6
    # The PyTorch distributed backend to use
    distrib_backend: NCCL
    # Visual encoder backbone
    pretrained_weights: data/ddppo-models/gibson-2plus-resnet50.pth
    # Initialize with pretrained weights
    pretrained: False
    # Initialize just the visual encoder backbone with pretrained weights
    pretrained_encoder: False
    # Whether or not the visual encoder backbone will be trained.
    train_encoder: False
    # Whether or not to reset the critic linear layer
    reset_critic: False

    # Model parameters
    backbone: se_resneXt50
    rnn_type: LSTM
    num_recurrent_layers: 2
