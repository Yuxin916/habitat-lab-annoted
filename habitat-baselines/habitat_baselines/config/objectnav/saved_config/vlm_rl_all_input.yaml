# @package _global_

defaults:
  - /habitat_baselines: habitat_baselines_rl_config_base
  - /benchmark/nav/objectnav: objectnav_hm3d
  - _self_

habitat:
  environment:
    iterator_options:
      max_scene_repeat_steps: 50000
  task:
    success_reward: 2.5
    slack_reward: -1e-3
  dataset:
    # use the clean habitat v2 dataset
    split: "one"
    train_eps: 20
    # the reason why i use absolute path, i download data to another folder
    data_path: "data/datasets/objectnav/hm3d/v2/{split}/{split}.json.gz"
    scenes_dir: "data/scene_datasets/"

habitat_baselines:
  torch_gpu_id: 0
  tensorboard_dir: "log/tb/vlm_20eps" #
  video_dir: "log/video_dir/vlm_20eps" #
  test_episode_count: -1
  eval_ckpt_path_dir: "ckpt/vlm_20eps/latest.pth" #
  num_environments: 2 # 8 FIXED to 4090 when training, 4 when eval the minieval ( Reducing the number of environments to be the number of scenes.)
  checkpoint_folder: "ckpt/vlm_20eps/" #
  trainer_name: "ddppo"  # "ddppo" or "ppo" or "ver" (faster)
  num_updates: 27000
  log_interval: 5
  log_file: "log/log/vlm_20eps.log" #
  num_checkpoints: 500
  # Force PyTorch to be single threaded as
  # this improves performance considerably
  force_torch_single_threaded: True

  eval:
    split: "one"
    video_option: ["disk", "tensorboard"]

  rl:
    policy:
      main_agent:
        name: "SpatialBotPolicy" # PointNavResNetPolicy | SpatialBotPolicy | SigLipPolicy | VLMVisualPolicy

    ppo:
      # ppo params
      clip_param: 0.2
      ppo_epoch: 4
      num_mini_batch: 2
      value_loss_coef: 0.5
      entropy_coef: 0.01
      lr: 8.0e-4
      eps: 1e-5
      max_grad_norm: 0.2
      num_steps: 128
      use_gae: True
      gamma: 0.99
      tau: 0.95
      use_linear_clip_decay: False
      use_linear_lr_decay: False
      reward_window_size: 50

      use_normalized_advantage: False

      hidden_size: 512

    ddppo:
      sync_frac: 0.6
      # The PyTorch distributed backend to use
      distrib_backend: NCCL
      # Visual encoder backbone
      pretrained_weights: data/ddppo-models/gibson-2plus-resnet50.pth
      # Initialize with pretrained weights
      pretrained: False
      # Initialize just the visual encoder backbone with pretrained weights
      pretrained_encoder: False
      # Whether or not the visual encoder backbone will be trained.
      train_encoder: False
      # Whether or not to reset the critic linear layer
      reset_critic: False

      # Model parameters
      backbone: BunnyPhiForCausalLM # se_resneXt50 | BunnyPhiForCausalLM | SigLip | VLMVisonTowerEncoder
      rnn_type: LSTM
      num_recurrent_layers: 2
